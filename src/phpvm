#!/usr/bin/env bash

# Hard-crash everything
set -e

#include <config/version>
#include <fn/distro>
#include <fn/ncpu>
#include <fn/version>
#include <fn/untar>
#include <fn/ppatch>
#include <fn/contains>

export CFLAGS=
export CONFOPTS=
export MAKEOPTS="-j$(($(ncpu)+1))"

if [ -z "${PREFIX+x}" ]; then
  export PREFIX=/usr/local
fi

if [ -z "${CC+x}" ]; then
  export CC=$(which gcc-9 gcc | head -n 1)
fi

# Gentoo stuff
if [ -f /etc/portage/make.conf ]; then
  source /etc/portage/make.conf
fi

# Configs
if [ -f /etc/phpvmrc ]; then
  source /etc/phpvmrc
fi
if [ -f ~/.phpvmrc ]; then
  source ~/.phpvmrc
fi

# Extensions
#include <ext/all/list>
PATCHES=()
EXTS=()

# Track some variables
cmd=list
target="7.3.12"
install_deps=0

# Parse args
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    list|version|help|extensions)
      cmd="$1"
      ;;
    use)
      shift
      target="$1"
      cmd="use"
      ;;
    --help)
      cmd="help"
      ;;
    --install-dependencies|-I)
      install_deps=1
      ;;
    --full)
      for EXT in ${ALLEXTS[@]}; do
        EXTS+=("$EXT")
      done
      echo "EXTS: ${EXTS[@]}"
      ;;
    --ext|-e)
      shift
      EXTS+=("$1")
      ;;
    --prefix)
      shift
      PREFIX="${PREFIX}"
      ;;
  esac
  shift
done

# Decode minor & major versions
minor=$(echo "${target}" | tr '.' ' ' | awk '{print $2}')
major=$(echo "${target}" | tr '.' ' ' | awk '{print $1}')

# Fetch patches to include
#include <patches/all>

# Run command
case "$cmd" in
  list)
    ls /usr/src/phpvm/ | grep "php-"
    ;;
  use)

    if [ $install_deps -gt 0 ]; then
      case "$(distro)" in
        alpine)
          sudo apk add \
            autoconf \
            build-base \
            curl-dev \
            git \
            grep \
            icu-dev \
            libxml2-dev \
            mlocate \
            postgresql-dev \
            ;
          ;;
        osx)
          ;;
      esac
    fi

    # Ensure required dirs exist
    sudo mkdir -p "${PREFIX}/src/phpvm"
    sudo chown -R $USER "${PREFIX}/src/phpvm"

    # Remove old php version
    sudo rm -rf "${PREFIX}/bin/pear*"
    sudo rm -rf "${PREFIX}/bin/pecl*"
    sudo rm -rf "${PREFIX}/bin/phar*"
    sudo rm -rf "${PREFIX}/bin/php*"
    sudo rm -rf "${PREFIX}/etc/pear*"
    sudo rm -rf "${PREFIX}/etc/php*"
    sudo rm -rf "${PREFIX}/include/php*"
    sudo rm -rf "${PREFIX}/lib/php*"
    sudo rm -rf "${PREFIX}/lib/php.ini"
    sudo rm -rf "${PREFIX}/php*"
    sudo rm -rf "${PREFIX}/sbin/php*"

    # Download and unpack php
    [ -f "${PREFIX}/src/phpvm/php-${target}/configure" ] || {
      sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}"
      sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}"
      curl -L "http://php.net/get/php-${target}.tar.gz/from/this/mirror" | \
        untar - -C "${PREFIX}/src/phpvm"
      cd "${PREFIX}/src/phpvm/php-${target}"
      for patchContent in ${PATCHES[@]}; do
        echo -e "$patchContent" | base64 --decode | ppatch -p1
      done
    }

    # Build conf opts
    echo "Adding config flags"
#include <ext/all/flags>

    # Install dependencies
    echo "Preparing dependencies"
#include <ext/all/deps>

    echo "CONFOPTS: ${CONFOPTS}"

    # Configure and build php
    echo "Building PHP"
    cd "${PREFIX}/src/phpvm/php-${target}"
    ./configure -C ${CONFOPTS} \
      && make ${MAKEOPTS}

    # Install chosen version
    echo "Installing PHP"
    cd "${PREFIX}/src/phpvm/php-${target}"
    sudo make install

    # Install extra modules
    echo "Installing extra modules"
#include <ext/all/install>

   ;;
  help)
    name=$(basename ${0})
    echo "Usage:"
    echo "  ${name} list"
    echo "  ${name} version"
    echo "  ${name} use     <version>"
    echo "  ${name} help"
    echo ""
    echo "Commands:"
    echo "  extensions  show a list of available extensions"
    echo "  list        show the list of installed php versions"
    echo "  version     show the version of the currently in-use php"
    echo "  use         switch to a (different) php version"
    echo "  help        show this usage"
    echo ""
    echo "Options:"
    echo "  --install-dependencies -I        Install system dependencies"
    echo "  --ext                  -e  name  Include extension <name>"
    echo "  --full                           Include all available extensions"
    ;;
esac

