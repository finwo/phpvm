#!/usr/bin/env bash

# Hard-crash everything
set -e

VERSION=0.0.1
distro() {
  if [ -f /etc/apk/repositories ]; then
    echo "alpine"
  elif command -v brew &>/dev/null; then
    echo "osx"
  elif [ -f /etc/portage/make.conf ]; then
    echo "gentoo"
  else
    echo "unknown"
  fi
}
ncpu() {
  if command -v nproc &>/dev/null; then
    nproc
  else
    echo 1
  fi
}
# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
version() {
    curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
      grep '"tag_name":' |                                            # Get tag line
      sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}
untar() {
  TARBIN=$(command -v gtar tar | head -n 1)
  ${TARBIN} xzf "$@"
}
ppatch() {
  PATCHBIN=$(command -v gpatch patch | head -n 1)
  cat | ${PATCHBIN} "$@"
}
contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            return 0
        fi
    }
    return 1
}

export CFLAGS=
export CONFOPTS=
export MAKEOPTS="-j$(($(ncpu)+1))"

if [ -z "${PREFIX+x}" ]; then
  export PREFIX=/usr/local
fi

if [ -z "${CC+x}" ]; then
  export CC=$(which gcc-9 gcc | head -n 1)
fi

# Gentoo stuff
if [ -f /etc/portage/make.conf ]; then
  source /etc/portage/make.conf
fi

# Configs
if [ -f /etc/phpvmrc ]; then
  source /etc/phpvmrc
fi
if [ -f ~/.phpvmrc ]; then
  source ~/.phpvmrc
fi

# Extensions
ALLEXTS=()
ALLEXTS+=("fpm" "calendar" "dba" "exif" "mbstring" "ftp" "pcntl" "soap")
ALLEXTS+=("sockets" "sysvmsg" "sysvsem" "sysvshm" "wddx" "zip" "bcmath")
ALLEXTS+=("gnu-ld" "mysqli" "pdo-mysql" "curl" "mhash" "pdo-pgsql" "pgsql")
ALLEXTS+=("openssl" "zlib" "memcached" "memcache" "mongodb" "psr" "phalcon")
ALLEXTS+=("intl")
PATCHES=()
EXTS=()

# Track some variables
cmd=list
target="7.3.12"
install_deps=0

# Parse args
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    list|version|help|extensions|update)
      cmd="$1"
      ;;
    use)
      shift
      target="$1"
      cmd="use"
      ;;
    --help)
      cmd="help"
      ;;
    --install-dependencies|-I)
      install_deps=1
      ;;
    --full)
      for EXT in ${ALLEXTS[@]}; do
        EXTS+=("$EXT")
      done
      echo "EXTS: ${EXTS[@]}"
      ;;
    --ext|-e)
      shift
      EXTS+=("$1")
      ;;
    --prefix)
      shift
      PREFIX="${PREFIX}"
      ;;
  esac
  shift
done

# Decode minor & major versions
minor=$(echo "${target}" | tr '.' ' ' | awk '{print $2}')
major=$(echo "${target}" | tr '.' ' ' | awk '{print $1}')

# Fetch patches to include
if [ "${major}" -eq "7" ] && [ "${minor}" -eq "2" ]; then
PATCHES+=("RnJvbSA0MDcyYjI3ODcwNzRlZThlMjQ3YTY2Mzk1ODViNDllMTBjNWE1NWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiAiQ2hyaXN0b3BoIE0uIEJlY2tlciIgPGNtYmVja2VyNjlAZ214LmRlPgpEYXRlOiBUdWUsIDIwIE1hciAyMDE4IDE2OjM1OjM5ICswMTAwClN1YmplY3Q6IFtQQVRDSF0gRml4ICM3NjExMzogbWJzdHJpbmcgZG9lcyBub3QgYnVpbGQgd2l0aCBPbmlndXJ1bWEgNi44LjEKCkFzIG9mIE9uaWd1cnVtYSA2LjguMSwgdGhlIHJlZ2V4IHN0cnVjdHVyZSBoYXMgYmVlbiBtb3ZlZCBmcm9tIHRoZQpwdWJsaWMgYG9uaWd1cnVtYS5oYCB0byB0aGUgcHJpdmF0ZSBgcmVnaW50LmhgLiAgVGh1cywgaXQgaXMgbm8gbG9uZ2VyCnBvc3NpYmxlIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGUgc3RydWN0J3MgbWVtYmVycywgYW5kIGFjdHVhbGx5LCB0aGVyZQppcyBubyBuZWVkIHRvLCBzaW5jZSB0aGVyZSBhcmUgcmVzcGVjdGl2ZSBhY2Nlc3NvciBmdW5jdGlvbnMgYXZhaWxhYmxlCmF0IGxlYXN0IG9mIDIuMy4xLgotLS0KIGV4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2V4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKaW5kZXggYTVhNmNkMC4uN2E3MGM2MyAxMDA2NDQKLS0tIGEvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKKysrIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKQEAgLTQ1Miw3ICs0NTIsNyBAQCBzdGF0aWMgcGhwX21iX3JlZ2V4X3QgKnBocF9tYnJlZ2V4X2NvbXBpbGVfcGF0dGVybihjb25zdCBjaGFyICpwYXR0ZXJuLCBpbnQgcGF0bAogCU9uaWdVQ2hhciBlcnJfc3RyW09OSUdfTUFYX0VSUk9SX01FU1NBR0VfTEVOXTsKIAogCXJjID0gemVuZF9oYXNoX3N0cl9maW5kX3B0cigmTUJSRVgoaHRfcmMpLCAoY2hhciAqKXBhdHRlcm4sIHBhdGxlbik7Ci0JaWYgKCFyYyB8fCByYy0+b3B0aW9ucyAhPSBvcHRpb25zIHx8IHJjLT5lbmMgIT0gZW5jIHx8IHJjLT5zeW50YXggIT0gc3ludGF4KSB7CisJaWYgKCFyYyB8fCBvbmlnX2dldF9vcHRpb25zKHJjKSAhPSBvcHRpb25zIHx8IG9uaWdfZ2V0X2VuY29kaW5nKHJjKSAhPSBlbmMgfHwgb25pZ19nZXRfc3ludGF4KHJjKSAhPSBzeW50YXgpIHsKIAkJaWYgKChlcnJfY29kZSA9IG9uaWdfbmV3KCZyZXR2YWwsIChPbmlnVUNoYXIgKilwYXR0ZXJuLCAoT25pZ1VDaGFyICopKHBhdHRlcm4gKyBwYXRsZW4pLCBvcHRpb25zLCBlbmMsIHN5bnRheCwgJmVycl9pbmZvKSkgIT0gT05JR19OT1JNQUwpIHsKIAkJCW9uaWdfZXJyb3JfY29kZV90b19zdHIoZXJyX3N0ciwgZXJyX2NvZGUsICZlcnJfaW5mbyk7CiAJCQlwaHBfZXJyb3JfZG9jcmVmKE5VTEwsIEVfV0FSTklORywgIm1icmVnZXggY29tcGlsZSBlcnI6ICVzIiwgZXJyX3N0cik7Ci0tIAoyLjEuNAo=")
fi
if [ "${major}" -eq "7" ] && [ "${minor}" -eq "3" ]; then
PATCHES+=("RnJvbSA0MDcyYjI3ODcwNzRlZThlMjQ3YTY2Mzk1ODViNDllMTBjNWE1NWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiAiQ2hyaXN0b3BoIE0uIEJlY2tlciIgPGNtYmVja2VyNjlAZ214LmRlPgpEYXRlOiBUdWUsIDIwIE1hciAyMDE4IDE2OjM1OjM5ICswMTAwClN1YmplY3Q6IFtQQVRDSF0gRml4ICM3NjExMzogbWJzdHJpbmcgZG9lcyBub3QgYnVpbGQgd2l0aCBPbmlndXJ1bWEgNi44LjEKCkFzIG9mIE9uaWd1cnVtYSA2LjguMSwgdGhlIHJlZ2V4IHN0cnVjdHVyZSBoYXMgYmVlbiBtb3ZlZCBmcm9tIHRoZQpwdWJsaWMgYG9uaWd1cnVtYS5oYCB0byB0aGUgcHJpdmF0ZSBgcmVnaW50LmhgLiAgVGh1cywgaXQgaXMgbm8gbG9uZ2VyCnBvc3NpYmxlIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGUgc3RydWN0J3MgbWVtYmVycywgYW5kIGFjdHVhbGx5LCB0aGVyZQppcyBubyBuZWVkIHRvLCBzaW5jZSB0aGVyZSBhcmUgcmVzcGVjdGl2ZSBhY2Nlc3NvciBmdW5jdGlvbnMgYXZhaWxhYmxlCmF0IGxlYXN0IG9mIDIuMy4xLgotLS0KIGV4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2V4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKaW5kZXggYTVhNmNkMC4uN2E3MGM2MyAxMDA2NDQKLS0tIGEvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKKysrIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKQEAgLTQ1Miw3ICs0NTIsNyBAQCBzdGF0aWMgcGhwX21iX3JlZ2V4X3QgKnBocF9tYnJlZ2V4X2NvbXBpbGVfcGF0dGVybihjb25zdCBjaGFyICpwYXR0ZXJuLCBpbnQgcGF0bAogCU9uaWdVQ2hhciBlcnJfc3RyW09OSUdfTUFYX0VSUk9SX01FU1NBR0VfTEVOXTsKIAogCXJjID0gemVuZF9oYXNoX3N0cl9maW5kX3B0cigmTUJSRVgoaHRfcmMpLCAoY2hhciAqKXBhdHRlcm4sIHBhdGxlbik7Ci0JaWYgKCFyYyB8fCByYy0+b3B0aW9ucyAhPSBvcHRpb25zIHx8IHJjLT5lbmMgIT0gZW5jIHx8IHJjLT5zeW50YXggIT0gc3ludGF4KSB7CisJaWYgKCFyYyB8fCBvbmlnX2dldF9vcHRpb25zKHJjKSAhPSBvcHRpb25zIHx8IG9uaWdfZ2V0X2VuY29kaW5nKHJjKSAhPSBlbmMgfHwgb25pZ19nZXRfc3ludGF4KHJjKSAhPSBzeW50YXgpIHsKIAkJaWYgKChlcnJfY29kZSA9IG9uaWdfbmV3KCZyZXR2YWwsIChPbmlnVUNoYXIgKilwYXR0ZXJuLCAoT25pZ1VDaGFyICopKHBhdHRlcm4gKyBwYXRsZW4pLCBvcHRpb25zLCBlbmMsIHN5bnRheCwgJmVycl9pbmZvKSkgIT0gT05JR19OT1JNQUwpIHsKIAkJCW9uaWdfZXJyb3JfY29kZV90b19zdHIoZXJyX3N0ciwgZXJyX2NvZGUsICZlcnJfaW5mbyk7CiAJCQlwaHBfZXJyb3JfZG9jcmVmKE5VTEwsIEVfV0FSTklORywgIm1icmVnZXggY29tcGlsZSBlcnI6ICVzIiwgZXJyX3N0cik7Ci0tIAoyLjEuNAo=")
fi
if [ "${major}" -eq "7" ] && [ "${minor}" -eq "4" ]; then
PATCHES+=("RnJvbSA0MDcyYjI3ODcwNzRlZThlMjQ3YTY2Mzk1ODViNDllMTBjNWE1NWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiAiQ2hyaXN0b3BoIE0uIEJlY2tlciIgPGNtYmVja2VyNjlAZ214LmRlPgpEYXRlOiBUdWUsIDIwIE1hciAyMDE4IDE2OjM1OjM5ICswMTAwClN1YmplY3Q6IFtQQVRDSF0gRml4ICM3NjExMzogbWJzdHJpbmcgZG9lcyBub3QgYnVpbGQgd2l0aCBPbmlndXJ1bWEgNi44LjEKCkFzIG9mIE9uaWd1cnVtYSA2LjguMSwgdGhlIHJlZ2V4IHN0cnVjdHVyZSBoYXMgYmVlbiBtb3ZlZCBmcm9tIHRoZQpwdWJsaWMgYG9uaWd1cnVtYS5oYCB0byB0aGUgcHJpdmF0ZSBgcmVnaW50LmhgLiAgVGh1cywgaXQgaXMgbm8gbG9uZ2VyCnBvc3NpYmxlIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGUgc3RydWN0J3MgbWVtYmVycywgYW5kIGFjdHVhbGx5LCB0aGVyZQppcyBubyBuZWVkIHRvLCBzaW5jZSB0aGVyZSBhcmUgcmVzcGVjdGl2ZSBhY2Nlc3NvciBmdW5jdGlvbnMgYXZhaWxhYmxlCmF0IGxlYXN0IG9mIDIuMy4xLgotLS0KIGV4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2V4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKaW5kZXggYTVhNmNkMC4uN2E3MGM2MyAxMDA2NDQKLS0tIGEvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKKysrIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKQEAgLTQ1Miw3ICs0NTIsNyBAQCBzdGF0aWMgcGhwX21iX3JlZ2V4X3QgKnBocF9tYnJlZ2V4X2NvbXBpbGVfcGF0dGVybihjb25zdCBjaGFyICpwYXR0ZXJuLCBpbnQgcGF0bAogCU9uaWdVQ2hhciBlcnJfc3RyW09OSUdfTUFYX0VSUk9SX01FU1NBR0VfTEVOXTsKIAogCXJjID0gemVuZF9oYXNoX3N0cl9maW5kX3B0cigmTUJSRVgoaHRfcmMpLCAoY2hhciAqKXBhdHRlcm4sIHBhdGxlbik7Ci0JaWYgKCFyYyB8fCByYy0+b3B0aW9ucyAhPSBvcHRpb25zIHx8IHJjLT5lbmMgIT0gZW5jIHx8IHJjLT5zeW50YXggIT0gc3ludGF4KSB7CisJaWYgKCFyYyB8fCBvbmlnX2dldF9vcHRpb25zKHJjKSAhPSBvcHRpb25zIHx8IG9uaWdfZ2V0X2VuY29kaW5nKHJjKSAhPSBlbmMgfHwgb25pZ19nZXRfc3ludGF4KHJjKSAhPSBzeW50YXgpIHsKIAkJaWYgKChlcnJfY29kZSA9IG9uaWdfbmV3KCZyZXR2YWwsIChPbmlnVUNoYXIgKilwYXR0ZXJuLCAoT25pZ1VDaGFyICopKHBhdHRlcm4gKyBwYXRsZW4pLCBvcHRpb25zLCBlbmMsIHN5bnRheCwgJmVycl9pbmZvKSkgIT0gT05JR19OT1JNQUwpIHsKIAkJCW9uaWdfZXJyb3JfY29kZV90b19zdHIoZXJyX3N0ciwgZXJyX2NvZGUsICZlcnJfaW5mbyk7CiAJCQlwaHBfZXJyb3JfZG9jcmVmKE5VTEwsIEVfV0FSTklORywgIm1icmVnZXggY29tcGlsZSBlcnI6ICVzIiwgZXJyX3N0cik7Ci0tIAoyLjEuNAo=")
fi
if [ "${major}" -eq "7" ] && [ "${minor}" -eq "1" ]; then
PATCHES+=("RnJvbSA0MDcyYjI3ODcwNzRlZThlMjQ3YTY2Mzk1ODViNDllMTBjNWE1NWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiAiQ2hyaXN0b3BoIE0uIEJlY2tlciIgPGNtYmVja2VyNjlAZ214LmRlPgpEYXRlOiBUdWUsIDIwIE1hciAyMDE4IDE2OjM1OjM5ICswMTAwClN1YmplY3Q6IFtQQVRDSF0gRml4ICM3NjExMzogbWJzdHJpbmcgZG9lcyBub3QgYnVpbGQgd2l0aCBPbmlndXJ1bWEgNi44LjEKCkFzIG9mIE9uaWd1cnVtYSA2LjguMSwgdGhlIHJlZ2V4IHN0cnVjdHVyZSBoYXMgYmVlbiBtb3ZlZCBmcm9tIHRoZQpwdWJsaWMgYG9uaWd1cnVtYS5oYCB0byB0aGUgcHJpdmF0ZSBgcmVnaW50LmhgLiAgVGh1cywgaXQgaXMgbm8gbG9uZ2VyCnBvc3NpYmxlIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGUgc3RydWN0J3MgbWVtYmVycywgYW5kIGFjdHVhbGx5LCB0aGVyZQppcyBubyBuZWVkIHRvLCBzaW5jZSB0aGVyZSBhcmUgcmVzcGVjdGl2ZSBhY2Nlc3NvciBmdW5jdGlvbnMgYXZhaWxhYmxlCmF0IGxlYXN0IG9mIDIuMy4xLgotLS0KIGV4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2V4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKaW5kZXggYTVhNmNkMC4uN2E3MGM2MyAxMDA2NDQKLS0tIGEvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKKysrIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKQEAgLTQ1Miw3ICs0NTIsNyBAQCBzdGF0aWMgcGhwX21iX3JlZ2V4X3QgKnBocF9tYnJlZ2V4X2NvbXBpbGVfcGF0dGVybihjb25zdCBjaGFyICpwYXR0ZXJuLCBpbnQgcGF0bAogCU9uaWdVQ2hhciBlcnJfc3RyW09OSUdfTUFYX0VSUk9SX01FU1NBR0VfTEVOXTsKIAogCXJjID0gemVuZF9oYXNoX3N0cl9maW5kX3B0cigmTUJSRVgoaHRfcmMpLCAoY2hhciAqKXBhdHRlcm4sIHBhdGxlbik7Ci0JaWYgKCFyYyB8fCByYy0+b3B0aW9ucyAhPSBvcHRpb25zIHx8IHJjLT5lbmMgIT0gZW5jIHx8IHJjLT5zeW50YXggIT0gc3ludGF4KSB7CisJaWYgKCFyYyB8fCBvbmlnX2dldF9vcHRpb25zKHJjKSAhPSBvcHRpb25zIHx8IG9uaWdfZ2V0X2VuY29kaW5nKHJjKSAhPSBlbmMgfHwgb25pZ19nZXRfc3ludGF4KHJjKSAhPSBzeW50YXgpIHsKIAkJaWYgKChlcnJfY29kZSA9IG9uaWdfbmV3KCZyZXR2YWwsIChPbmlnVUNoYXIgKilwYXR0ZXJuLCAoT25pZ1VDaGFyICopKHBhdHRlcm4gKyBwYXRsZW4pLCBvcHRpb25zLCBlbmMsIHN5bnRheCwgJmVycl9pbmZvKSkgIT0gT05JR19OT1JNQUwpIHsKIAkJCW9uaWdfZXJyb3JfY29kZV90b19zdHIoZXJyX3N0ciwgZXJyX2NvZGUsICZlcnJfaW5mbyk7CiAJCQlwaHBfZXJyb3JfZG9jcmVmKE5VTEwsIEVfV0FSTklORywgIm1icmVnZXggY29tcGlsZSBlcnI6ICVzIiwgZXJyX3N0cik7Ci0tIAoyLjEuNAo=")
fi
if [ "${major}" -eq "7" ] && [ "${minor}" -eq "0" ]; then
PATCHES+=("RnJvbSA0MDcyYjI3ODcwNzRlZThlMjQ3YTY2Mzk1ODViNDllMTBjNWE1NWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiAiQ2hyaXN0b3BoIE0uIEJlY2tlciIgPGNtYmVja2VyNjlAZ214LmRlPgpEYXRlOiBUdWUsIDIwIE1hciAyMDE4IDE2OjM1OjM5ICswMTAwClN1YmplY3Q6IFtQQVRDSF0gRml4ICM3NjExMzogbWJzdHJpbmcgZG9lcyBub3QgYnVpbGQgd2l0aCBPbmlndXJ1bWEgNi44LjEKCkFzIG9mIE9uaWd1cnVtYSA2LjguMSwgdGhlIHJlZ2V4IHN0cnVjdHVyZSBoYXMgYmVlbiBtb3ZlZCBmcm9tIHRoZQpwdWJsaWMgYG9uaWd1cnVtYS5oYCB0byB0aGUgcHJpdmF0ZSBgcmVnaW50LmhgLiAgVGh1cywgaXQgaXMgbm8gbG9uZ2VyCnBvc3NpYmxlIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGUgc3RydWN0J3MgbWVtYmVycywgYW5kIGFjdHVhbGx5LCB0aGVyZQppcyBubyBuZWVkIHRvLCBzaW5jZSB0aGVyZSBhcmUgcmVzcGVjdGl2ZSBhY2Nlc3NvciBmdW5jdGlvbnMgYXZhaWxhYmxlCmF0IGxlYXN0IG9mIDIuMy4xLgotLS0KIGV4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2V4dC9tYnN0cmluZy9waHBfbWJyZWdleC5jIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKaW5kZXggYTVhNmNkMC4uN2E3MGM2MyAxMDA2NDQKLS0tIGEvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKKysrIGIvZXh0L21ic3RyaW5nL3BocF9tYnJlZ2V4LmMKQEAgLTQ1Miw3ICs0NTIsNyBAQCBzdGF0aWMgcGhwX21iX3JlZ2V4X3QgKnBocF9tYnJlZ2V4X2NvbXBpbGVfcGF0dGVybihjb25zdCBjaGFyICpwYXR0ZXJuLCBpbnQgcGF0bAogCU9uaWdVQ2hhciBlcnJfc3RyW09OSUdfTUFYX0VSUk9SX01FU1NBR0VfTEVOXTsKIAogCXJjID0gemVuZF9oYXNoX3N0cl9maW5kX3B0cigmTUJSRVgoaHRfcmMpLCAoY2hhciAqKXBhdHRlcm4sIHBhdGxlbik7Ci0JaWYgKCFyYyB8fCByYy0+b3B0aW9ucyAhPSBvcHRpb25zIHx8IHJjLT5lbmMgIT0gZW5jIHx8IHJjLT5zeW50YXggIT0gc3ludGF4KSB7CisJaWYgKCFyYyB8fCBvbmlnX2dldF9vcHRpb25zKHJjKSAhPSBvcHRpb25zIHx8IG9uaWdfZ2V0X2VuY29kaW5nKHJjKSAhPSBlbmMgfHwgb25pZ19nZXRfc3ludGF4KHJjKSAhPSBzeW50YXgpIHsKIAkJaWYgKChlcnJfY29kZSA9IG9uaWdfbmV3KCZyZXR2YWwsIChPbmlnVUNoYXIgKilwYXR0ZXJuLCAoT25pZ1VDaGFyICopKHBhdHRlcm4gKyBwYXRsZW4pLCBvcHRpb25zLCBlbmMsIHN5bnRheCwgJmVycl9pbmZvKSkgIT0gT05JR19OT1JNQUwpIHsKIAkJCW9uaWdfZXJyb3JfY29kZV90b19zdHIoZXJyX3N0ciwgZXJyX2NvZGUsICZlcnJfaW5mbyk7CiAJCQlwaHBfZXJyb3JfZG9jcmVmKE5VTEwsIEVfV0FSTklORywgIm1icmVnZXggY29tcGlsZSBlcnI6ICVzIiwgZXJyX3N0cik7Ci0tIAoyLjEuNAo=")
fi

# Run command
case "$cmd" in
  list)
    ls /usr/src/phpvm/ | grep "php-"
    ;;
  update)
    SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
    SCRIPTNAME="$(basename $0)"
    curl -L https://finwo.github.io/phpvm/dist/phpvm > "${SCRIPTPATH}/${SCRIPTNAME}"
    ;;
  use)

    if [ $install_deps -gt 0 ]; then
      case "$(distro)" in
        alpine)
          sudo apk add \
            autoconf \
            build-base \
            curl-dev \
            git \
            grep \
            icu-dev \
            libxml2-dev \
            mlocate \
            postgresql-dev \
            ;
          ;;
        osx)
          ;;
      esac
    fi

    # Ensure required dirs exist
    sudo mkdir -p "${PREFIX}/src/phpvm"
    sudo chown -R $USER "${PREFIX}/src/phpvm"

    # Remove old php version
    sudo rm -rf "${PREFIX}/bin/pear*"
    sudo rm -rf "${PREFIX}/bin/pecl*"
    sudo rm -rf "${PREFIX}/bin/phar*"
    sudo rm -rf "${PREFIX}/bin/php*"
    sudo rm -rf "${PREFIX}/etc/pear*"
    sudo rm -rf "${PREFIX}/etc/php*"
    sudo rm -rf "${PREFIX}/include/php*"
    sudo rm -rf "${PREFIX}/lib/php*"
    sudo rm -rf "${PREFIX}/lib/php.ini"
    sudo rm -rf "${PREFIX}/php*"
    sudo rm -rf "${PREFIX}/sbin/php*"

    # Download and unpack php
    [ -f "${PREFIX}/src/phpvm/php-${target}/configure" ] || {
      sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}"
      sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}"
      curl -L "http://php.net/get/php-${target}.tar.gz/from/this/mirror" | \
        untar - -C "${PREFIX}/src/phpvm"
      cd "${PREFIX}/src/phpvm/php-${target}"
      for patchContent in ${PATCHES[@]}; do
        echo -e "$patchContent" | base64 --decode | ppatch -p1
      done
    }

    # Build conf opts
    echo "Adding config flags"
if contains "${EXTS[@]}" "bcmath"; then
  CONFOPTS="${CONFOPTS} --enable-bcmath"
fi
if contains "${EXTS[@]}" "calendar"; then
  CONFOPTS="${CONFOPTS} --enable-calendar"
fi
if contains "${EXTS[@]}" "curl"; then
  CONFOPTS="${CONFOPTS} --with-curl"
fi
if contains "${EXTS[@]}" "dba"; then
  CONFOPTS="${CONFOPTS} --enable-dba"
fi
if contains "${EXTS[@]}" "exif"; then
  CONFOPTS="${CONFOPTS} --enable-exif"
fi
if contains "${EXTS[@]}" "fpm"; then
  CONFOPTS="${CONFOPTS} --enable-fpm"
fi
if contains "${EXTS[@]}" "ftp"; then
  CONFOPTS="${CONFOPTS} --enable-ftp"
fi
if contains "${EXTS[@]}" "gnu-ld"; then
  CONFOPTS="${CONFOPTS} --with-gnu-ld"
fi
if [[ "$(distro)" == "osx" ]]; then
  CONFOPTS="${CONFOPTS} --with-iconv=shared,/usr/local/opt/libiconv"
else
  CONFOPTS="${CONFOPTS} --with-iconv"
fi
if contains "${EXTS[@]}" "mbstring"; then
  CONFOPTS="${CONFOPTS} --enable-mbstring"
fi
if contains "${EXTS[@]}" "mhash"; then
  CONFOPTS="${CONFOPTS} --with-mhash"
fi
if contains "${EXTS[@]}" "mysqli"; then
  CONFOPTS="${CONFOPTS} --with-mysqli"
fi
if contains "${EXTS[@]}" "openssl"; then
  CONFOPTS="${CONFOPTS} --with-openssl"
fi
if contains "${EXTS[@]}" "pcntl"; then
  CONFOPTS="${CONFOPTS} --enable-pcntl"
fi
if contains "${EXTS[@]}" "pdo-mysql"; then
  CONFOPTS="${CONFOPTS} --with-pdo-mysql"
fi
if contains "${EXTS[@]}" "pdo-pgsql"; then
  CONFOPTS="${CONFOPTS} --with-pdo-pgsql"
fi
if contains "${EXTS[@]}" "pgsql"; then
  CONFOPTS="${CONFOPTS} --with-pgsql"
fi
if contains "${EXTS[@]}" "soap"; then
  CONFOPTS="${CONFOPTS} --enable-soap"
fi
if contains "${EXTS[@]}" "sockets"; then
  CONFOPTS="${CONFOPTS} --enable-sockets"
fi
if contains "${EXTS[@]}" "sysvmsg"; then
  CONFOPTS="${CONFOPTS} --enable-sysvmsg"
fi
if contains "${EXTS[@]}" "sysvsem"; then
  CONFOPTS="${CONFOPTS} --enable-sysvsem"
fi
if contains "${EXTS[@]}" "sysvshm"; then
  CONFOPTS="${CONFOPTS} --enable-sysvshm"
fi
if contains "${EXTS[@]}" "wddx"; then
  CONFOPTS="${CONFOPTS} --enable-wddx"
fi
if contains "${EXTS[@]}" "zip"; then
  CONFOPTS="${CONFOPTS} --enable-zip"
fi
if contains "${EXTS[@]}" "zlib"; then
  CONFOPTS="${CONFOPTS} --with-zlib"
fi

    # Install dependencies
    echo "Preparing dependencies"
if [ $install_deps -gt 0 ]; then
  case "$(distro)" in
    alpine)
      sudo apk add gnu-libiconv-dev
      ;;
    osx)
      brew install libiconv
      ;;
  esac
fi
if [ $install_deps -gt 0 ]; then
  case "$(distro)" in
    alpine)
      sudo apk add libmemcached-dev
      ;;
    osx)
      brew install libmemcached
      ;;
  esac

  # Download memcache repo
  if ! [ -d "${PREFIX}/src/phpvm/php-${target}/ext/memcache" ]; then
    sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}/ext/memcache"
    sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}/ext/memcache"
    tarball="https://github.com/websupport-sk/pecl-memcache/archive/NON_BLOCKING_IO.tar.gz"
    if [ "$major" -eq 7 ]; then
      tarball="https://github.com/websupport-sk/pecl-memcache/archive/NON_BLOCKING_IO_php7.tar.gz"
    fi
    curl -L "${tarball}" | \
      untar - --strip-components=1 -C "${PREFIX}/src/phpvm/php-${target}/ext/memcache"
  fi
fi
if [ $install_deps -gt 0 ]; then
  case "$(distro)" in
    alpine)
      apk add libmemcached-dev
      ;;
    osx)
      brew install libmemcached
      ;;
  esac
fi

# Download memcached repo
if ! [ -d "${PREFIX}/src/phpvm/php-${target}/ext/memcached" ]; then
  sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}/ext/memcached"
  sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}/ext/memcached"
  tarball="https://github.com/php-memcached-dev/php-memcached/archive/master.tar.gz"
  if [ "${major}" -lt 7 ]; then
    tarball="https://github.com/php-memcached-dev/php-memcached/archive/REL2_0.tar.gz"
  fi
  curl -L "${tarball}" | \
    untar - --strip-components=1 -C "${PREFIX}/src/phpvm/php-${target}/ext/memcached"
fi
if [ $install_deps -gt 0 ]; then

  if ! [ -d "${PREFIX}/src/phpvm/php-${target}/ext/mongodb" ]; then
    mongoversion=$(version mongodb/mongo-php-driver)

    # Download mongodb ext
    sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}/ext/mongodb"
    sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}/ext/mongodb"
    tarball="https://github.com/mongodb/mongo-php-driver/releases/download/${mongoversion}/mongodb-${mongoversion}.tgz"
    curl -L "${tarball}" | \
      untar - --strip-components=1 -C "${PREFIX}/src/phpvm/php-${target}/ext/mongodb"

  fi


fi
if [ $install_deps -gt 0 ]; then
  case "$(distro)" in
    alpine)
      sudo apk add openssl-dev
      ;;
    osx)
      brew install openssl
      # mkdir -p "${PREFIX}/src/phpvm/php-${target}/libs/openssl"
      # curl -L "https://github.com/openssl/openssl/archive/OpenSSL_1_1_1c.tar.gz" | \
      #   untar - -C "${PREFIX}/src/phpvm/php-${target}/libs/openssl" --strip-components=1
      # cd "${PREFIX}/src/phpvm/php-${target}/libs/openssl"
      # ./config
      # echo "CONFIGURED"
      # make ${MAKEOPTS}
      # echo "MADE"
      # sudo make install ${MAKEOPTS}
      # echo "INSTALLED"
      ;;
  esac
fi
if [ $install_deps -gt 0 ]; then

  # Download phalcon repo
  if ! [ -d "${PREFIX}/src/phpvm/php-${target}/ext/phalcon" ]; then
    phalconversion=$(version phalcon/cphalcon)
    sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}/ext/phalcon"
    sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}/ext/phalcon"
    tarball="https://github.com/phalcon/cphalcon/archive/${phalconversion}.tar.gz"
    curl -L "${tarball}" | \
      untar - --strip-components=1 -C "${PREFIX}/src/phpvm/php-${target}/ext/phalcon"
  fi

fi
if [ $install_deps -gt 0 ]; then

  # Download psr repo
  if ! [ -d "${PREFIX}/src/phpvm/php-${target}/ext/psr" ]; then
    sudo mkdir -p "${PREFIX}/src/phpvm/php-${target}/ext/psr"
    sudo chown -R ${USER} "${PREFIX}/src/phpvm/php-${target}/ext/psr"
    tarball="https://github.com/jbboehr/php-psr/archive/master.tar.gz"
    curl -L "${tarball}" | \
      untar - --strip-components=1 -C "${PREFIX}/src/phpvm/php-${target}/ext/psr"
  fi
fi
if [ $install_deps -gt 0 ]; then
  case "$(distro)" in
    alpine)
      sudo apk add libzip-dev
      ;;
    osx)
      brew install libzip zlib
      # mkdir -p "${PREFIX}/src/phpvm/php-${target}/libs/zlib"
      # curl -L https://www.zlib.net/zlib-1.2.11.tar.gz | \
      #   untar - -C "${PREFIX}/src/phpvm/php-${target}/libs/zlib" --strip-components=1
      # cd "${PREFIX}/src/phpvm/php-${target}/libs/zlib"
      # ./configure
      # make ${MAKEOPTS}
      # sudo make install ${MAKEOPTS}
      ;;
  esac
fi

    echo "CONFOPTS: ${CONFOPTS}"

    # Configure and build php
    echo "Building PHP"
    cd "${PREFIX}/src/phpvm/php-${target}"
    ./configure -C ${CONFOPTS} \
      && make ${MAKEOPTS}

    # Install chosen version
    echo "Installing PHP"
    cd "${PREFIX}/src/phpvm/php-${target}"
    sudo make install

    # Install extra modules
    echo "Installing extra modules"
if contains "${EXTS[@]}" "memcache"; then
  echo "  - memcache"
  cd "${PREFIX}/src/phpvm/php-${target}/ext/memcache"
  printf "\n" | phpize
  printf "\n" | ./configure --enable-memcache
  make $MAKEOPTS
  sudo make install

  echo "extension=memcache.so" | sudo tee -a "${PREFIX}/lib/php.ini"
fi
if contains "${EXTS[@]}" "memcached"; then
  echo "  - memcached"
  cd "${PREFIX}/src/phpvm/php-${target}/ext/memcached"
  printf "\n" | phpize
  printf "\n" | ./configure -C --disable-memcached-sasl
  make $MAKEOPTS
  sudo make install

  echo "extension=memcached.so" | sudo tee -a "${PREFIX}/lib/php.ini"
fi
if contains "${EXTS[@]}" "mongodb"; then
  echo "  - mongodb"
  cd "${PREFIX}/src/phpvm/php-${target}/ext/mongodb"
  printf "\n" | phpize
  printf "\n" | ./configure -C
  make $MAKEOPTS
  sudo make install

  echo "extension=mongodb.so" | sudo tee -a "${PREFIX}/lib/php.ini"
fi
if contains "${EXTS[@]}" "phalcon"; then
  echo "  - phalcon"
  cd "${PREFIX}/src/phpvm/php-${target}/ext/phalcon/build/php${major}/safe"
  printf "\n" | phpize
  printf "\n" | ./configure -C --enable-phalcon
  make $MAKEOPTS
  sudo make install

  echo "extension=phalcon.so" | sudo tee -a "${PREFIX}/lib/php.ini"
fi
if contains "${EXTS[@]}" "psr"; then
  echo "  - psr"
  cd "${PREFIX}/src/phpvm/php-${target}/ext/psr"
  printf "\n" | phpize
  printf "\n" | ./configure -C
  make $MAKEOPTS
  sudo make install

  echo "extension=psr.so" | sudo tee -a "${PREFIX}/lib/php.ini"
fi

   ;;
  help)
    name=$(basename ${0})
    echo "Usage:"
    echo "  ${name} list"
    echo "  ${name} version"
    echo "  ${name} use     <version>"
    echo "  ${name} help"
    echo ""
    echo "Commands:"
    echo "  extensions  show a list of available extensions"
    echo "  list        show the list of installed php versions"
    echo "  version     show the version of the currently in-use php"
    echo "  use         switch to a (different) php version"
    echo "  update      self-update ${name}"
    echo "  help        show this usage"
    echo ""
    echo "Options:"
    echo "  --install-dependencies -I        Install system dependencies"
    echo "  --ext                  -e  name  Include extension <name>"
    echo "  --full                           Include all available extensions"
    ;;
esac

